# -*- coding: utf-8 -*-
"""ily.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12hLQmdRcdIE0uzPHaJvG0AL2gaYm1SjA
"""

import streamlit as st
import time

# --- App Configuration (Sets the browser tab title and icon) ---
st.set_page_config(page_title="Chat With Me", page_icon="ðŸ’¬")

# --- Data: Your keywords and the content to show ---
# We'll use this dictionary to find the right response.
keyword_links = {
    "happy": {
        "message": "Yay! I love that for you. Here's a happy tune:",
        "link": "https://www.youtube.com/watch?v=PhbWIFi3UaI"
    },
    "sad": {
        "message": "It's okay to feel sad. I'm here for you. Maybe this will help:",
        "link": "https://open.spotify.com/track/1e1o2zV2g2I0sAPZ21I6aD?si=411993202e77454b"
    },
    "sorry": { # Note: Changed "i'm sorry" to "sorry" for easier typing
        "message": "I'm sorry...:",
        "link": "https://i.pinimg.com/originals/e3/9d/2d/e39d2d322ad24a35f396263438a35f7c.gif"
    },
    "eepy": {
        "message": "Time for a nap! Here are some relaxing sounds:",
        "link": "https://www.youtube.com/watch?v=rUxyKA_-grg"
    },
    "imy": {
        "message": "Thinking of you too! Here's a song for that feeling:",
        "link": "https://open.spotify.com/track/4uSfw3Lu390bB5g9I3K4A5?si=5a285d85d7b545a1"
    }
}

# --- App Layout and Logic ---

st.title("Hi! I'm Sprinkles:D How are you feeling today? ðŸ’¬")
st.write("You can tell me if you're `happy`, `sad`, `sorry`, `eepy`, or if you `imy`.")

# 1. Initialize chat history in session_state
#    This is the "memory" of the app. It persists as long as the user's browser tab is open.
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Hi there! How are you feeling right now?"}
    ]

# 2. Display all past messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])

# 3. Use st.chat_input to get user input at the bottom of the screen
if prompt := st.chat_input("Tell me in one word..."):
    # Add user's message to the chat history and display it
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Prepare and display the assistant's response
    with st.chat_message("assistant"):
        message_placeholder = st.empty()
        # Simulate a "typing" effect
        message_placeholder.markdown("Thinking...")
        time.sleep(0.5)

        # Clean the user's input to find the keyword
        cleaned_prompt = prompt.lower().strip()

        # Find the matching keyword from the user's input
        response_key = None
        for key in keyword_links.keys():
            if key in cleaned_prompt:
                response_key = key
                break

        if response_key:
            # If a keyword is found, create the response
            result = keyword_links[response_key]
            response_text = f"{result['message']} [Click here!]({result['link']})"
            message_placeholder.markdown(response_text)
        else:
            # If no keyword is found, give a default response
            response_text = "I'm sorry, I don't have a response for that feeling. Please try one of the keywords: `happy`, `sad`, `sorry`, `eepy`, `imy`."
            message_placeholder.markdown(response_text)

    # Add assistant's response to chat history
    st.session_state.messages.append({"role": "assistant", "content": response_text})